package TDAColaCP;
import java.util.Comparator;
import Exceptions.*;
import TDADiccionario.Entrada;
import TDADiccionario.Entry;

public class Heap<K,V> implements PriorityQueue<K,V> {
	
	protected Entrada<K,V>[] elems;
	protected Comparator<K> comp;
	protected int size;
	
	/**
	 * Crea una instancia de clase Heap.
	 */
	@SuppressWarnings("unchecked")
	public Heap(int maxElems, Comparator<K> comp) {
		elems= (Entrada<K,V>[])  new Entrada[maxElems];
		this.comp= comp;
		size= 0;
	}
	/**
	 * Crea una instancia de clase Heap.
	 */
	public Heap() {
		this(100,new Comparador<K>());
	}
	/**
	 * Crea una instancia de clase Heap.
	 */
	public Heap(Comparator<K> c) {
		this(100,c);
	}
	/**
	 * Crea una instancia de clase Heap.
	 */
	public Heap(int max) {
		this(max, new Comparador<K>());
	}
	
	/**
	 * Consulta la cantidad de elementos de la cola.
	 * @return Cantidad de elementos de la cola.
	 */	
	public int size() {
		return size;
	}
	
	/**
	 * Consulta si la cola est� vac�a.
	 * @return Verdadero si la cola está vacía, falso en caso contrario.
	 */
	public boolean isEmpty() {
		return size==0;
	}
	
	/**
	 * Devuelve la entrada con menor prioridad de la cola.
	 * @return Entrada con menor prioridad.
	 * @throws EmptyPriorityQueueException si la cola está vacía.
	 */
	public Entry<K,V>min() throws EmptyPriorityQueueException{
		if(size==0)
			throw new EmptyPriorityQueueException("Error: Cola con prioridad vacía.");
		return elems[1];
	}
	
	/**
	 * Inserta un par clave-valor y devuelve la entrada creada.
	 * @param key Clave de la entrada a insertar.
	 * @param value Valor de la entrada a insertar.
	 * @return Entrada creada.
	 * @throws InvalidKeyException si la clave es inválida.
	 */
	public Entry<K,V> insert(K key, V value) throws InvalidKeyException{
		if(size==elems.length-1) {
			Entrada<K,V>[] array= (Entrada<K,V>[]) new Entrada[elems.length*3];
			for(int i=1; i<elems.length; i++)
				array[i]= elems[i];
			elems= array;
		}
		
		Entrada<K,V> entrada= new Entrada<K,V>(checkKey(key), value);
		size++;
		elems[size]= entrada;
		
		int i= size;
		boolean seguir= true;
		while(i>1 && seguir) {
			Entrada<K,V> elemActual=elems[i];
			Entrada<K,V> elemPadre= elems[i/2];
			if(comp.compare(elemPadre.getKey(), elemActual.getKey())>0) {
				Entrada<K,V> aux= elems[i];
				elems[i]= elems[i/2];
				elems[i/2]= aux;
				i/=2;
			} else seguir= false;
		}
		return entrada;
	}
	
	/*
	 * 
	 */
	private K checkKey(K key) throws InvalidKeyException {
		try {
			comp.compare(key, key);
		} catch (ClassCastException | NullPointerException e) {
			throw new InvalidKeyException("error: la clave no es comparable");
		}
		return key;
	}
	
	/**
	 * Remueve y devuelve la entrada con menor prioridad de la cola.
	 * @return Entrada con menor prioridad.
	 * @throws EmptyPriorityQueueException si la cola está vacía.
	 */
	public Entry<K,V> removeMin()throws EmptyPriorityQueueException{
		if(size()==0) 
			throw new EmptyPriorityQueueException("Error al eliminar: cola vacía.");
		Entry<K,V> entrada= min();	
		if(size==1) {
			elems[1]= null;
			size=0;
		} else {
			elems[1]= elems[size];
			elems[size]= null;
			size--;
			int i=1;
			boolean seguir= true;
			while(seguir) {
				int hi= i*2;
				int hd= i*2+1;
				boolean tieneHijoIzquierdo= hi<= size();
				boolean tieneHijoDerecho= hd<= size();
				if(!tieneHijoIzquierdo) seguir= false;
				else {
					int m= hi;
					if(tieneHijoDerecho) {
						if(comp.compare(elems[hi].getKey(), elems[hd].getKey())<0)m=hi;
						 else m= hd;
					}else m=hi;
					if(comp.compare(elems[i].getKey(),elems[m].getKey())>0) {
						Entrada<K,V> aux= elems[i];
						elems[i]= elems[m];
						elems[m]= aux;
						i= m;
					} else seguir= false;	
				}	
			}
		}
	return entrada;
	}
}
