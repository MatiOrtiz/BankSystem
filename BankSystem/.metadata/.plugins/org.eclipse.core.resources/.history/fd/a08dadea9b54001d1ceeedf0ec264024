import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JButton;
import java.awt.Font;

public class Guidemo {

		private JFrame frmProyecto;
		private JTextField ingresarCaracter;
		private JButton agregarNodo;
		private JTextField anNodo;
		private JTextField anPadre;
		private JButton eliminarNodo;
		private JTextField enNodo;
		private JButton obtenerGrados;
		private JButton gradosDelArbol;
		private JButton obtenerCamino;
		private JTextField ocNodo;
		private JButton recorridoPreOrden;
		private JButton recorridoPorNiveles;
		private JButton recorridoPostOrden;
		private JButton eliminarNodosDeGrado;
		private JTextField endgGrado;

		/**
		 * Launch the application.
		 */
		public static void main(String[] args) {
			EventQueue.invokeLater(new Runnable() {
				public void run() {
					try {
						GUI window = new GUI();
						window.frmProyecto.setVisible(true);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
		}

		/**
		 * Create the application.
		 */
		public GUI() {
			initialize();
		}

		/**
		 * Initialize the contents of the frame.
		 */
		private void initialize() {
			frmProyecto = new JFrame();
			frmProyecto.setTitle("Proyecto");
			frmProyecto.setBounds(100, 100, 675, 415);
			frmProyecto.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
			JLabel lblNewLabel = new JLabel("con r\u00F3tulo");
			JLabel lblNewLabel_1 = new JLabel("como padre");	
			JLabel datos = new JLabel("");
			
			JButton ingreso = new JButton("Ingrese su r\u00F3tulo inicial");
			
			ingreso.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if(ingreso == e.getSource()) {
						
						ingresarCaracter.setEditable(false);
						ingresarCaracter.setEnabled(false);
						ingreso.setEnabled(false);
						anNodo.setEnabled(true);
						anNodo.setEditable(true);
						anPadre.setEnabled(true);
						anPadre.setEditable(true);
						agregarNodo.setEnabled(true);
						enNodo.setEditable(true);
						enNodo.setEnabled(true);
						eliminarNodo.setEnabled(true);
						obtenerGrados.setEnabled(true);
						gradosDelArbol.setEnabled(true);
						ocNodo.setEditable(true);
						ocNodo.setEnabled(true);
						obtenerCamino.setEnabled(true);
						recorridoPreOrden.setEnabled(true);
						recorridoPostOrden.setEnabled(true);
						recorridoPorNiveles.setEnabled(true);
						endgGrado.setEditable(true);
						endgGrado.setEnabled(true);
						eliminarNodosDeGrado.setEnabled(true);
						
						//Constructor------------------------------------------------------------------------------------------------------
						try {
						String s = ingresarCaracter.getText();
						char c = s.charAt(0);
						
						Principal A = new Principal(c);
						
						//AgregarNodo-------------------------------------------------------------------------------------------------------
						
						agregarNodo.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								try {
								if(agregarNodo == e.getSource()) {
									String s = anNodo.getText();
									char c = s.charAt(0);
									String s2 = anPadre.getText();
									char d = s2.charAt(0);
									
									A.agregarNodo(c, d);
									anNodo.setText("");
									anPadre.setText("");
								}
								}catch(StringIndexOutOfBoundsException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese los caracteres correctamente");
								}
								catch (InvalidPositionException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Posición ingresada inválida");
								}	
							}
						});
						
						//EliminarNodo------------------------------------------------------------------------------------------------------
						
						eliminarNodo.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								try {
								if(eliminarNodo == e.getSource()) {
									String s = enNodo.getText();
									char c = s.charAt(0);
									A.eliminarNodo(c);
									enNodo.setText("");	
								}
							}catch(EmptyTreeException error) {
								JOptionPane.showMessageDialog(frmProyecto, "Error. Arbol vacio");
							}
							 catch(BoundaryViolationException error) {
								JOptionPane.showMessageDialog(frmProyecto, "Error. El nodo no tiene padre");
							 }
							 catch(InvalidPositionException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Nodo Invalido");
							 }
							 catch(StringIndexOutOfBoundsException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese los caracteres correctamente");
							 }
							}
						});
						
						//ObtenerGrados------------------------------------------------------------------------------------------------------
						
						gradosDelArbol.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								if(gradosDelArbol == e.getSource()) {							
									datos.setText(A.obtenerGradoDelArbol());							
								}
							}
						});
						
						//GradoDelArbol------------------------------------------------------------------------------------------------------
						
						obtenerGrados.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								if(obtenerGrados == e.getSource()) {							
									datos.setText(A.obtenerGrados());							
								}
							}
						});
									
						//ObtenerCamino-----------------------------------------------------------------------------------------------------
						
						obtenerCamino.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								try {
								if(obtenerCamino == e.getSource()) {
									String s = ocNodo.getText();
									char c = s.charAt(0);
										datos.setText(A.obtenerCamino(c));
										ocNodo.setText("");
								}
							} catch(InvalidPositionException error) {
								JOptionPane.showMessageDialog(frmProyecto, "Error. Posición Inválida");
							}
							 catch(NullPointerException error) {
								JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese un caracter correcto");	
							 }
							catch(StringIndexOutOfBoundsException error) {
								JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese un caracter");
							}
							}
						});
						
						//RecorridoPreOrden-----------------------------------------------------------------------------------------------------
						
						recorridoPreOrden.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								if(recorridoPreOrden == e.getSource()) {							
									datos.setText(A.mostrarRecorridoPreOrden());							
								}
							}
						});
						
						//RecorridoPorNiveles-----------------------------------------------------------------------------------------------------
						
						recorridoPorNiveles.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								if(recorridoPorNiveles == e.getSource()) {							
									datos.setText(A.mostrarRecorridoPorNiveles());							
								}
							}
						});
						
						//RecorridoPostOrden-----------------------------------------------------------------------------------------------------
						
						recorridoPostOrden.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								if(recorridoPostOrden == e.getSource()) {							
									datos.setText(A.mostrarRecorridoPostOrden());							
								}
							}
						});
						
						//EliminarNodosGradoK-----------------------------------------------------------------------------------------------------
						
						eliminarNodosDeGrado.addActionListener(new ActionListener(){
							public void actionPerformed(ActionEvent e) {
								try {
								if(eliminarNodosDeGrado == e.getSource()) {	
								String s = endgGrado.getText();
								int c = Integer.parseInt(s);
								
								A.eliminarNodosGradoK(c);
								datos.setText("Se eliminaron los nodos de grado: "+c);
								}
								}catch(NullPointerException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese un grado correcto");	
								 }
								catch(StringIndexOutOfBoundsException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese un caracter");
									}
								catch(NumberFormatException error) {
									JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese un número");
								}
							}
						});
						}catch(StringIndexOutOfBoundsException error) {
							JOptionPane.showMessageDialog(frmProyecto, "Error. Ingrese un caracter");
							}
					}
				}
			});
			
			ingresarCaracter = new JTextField();
			ingresarCaracter.setColumns(10);
			
			agregarNodo = new JButton("Agregar nodo:");
			agregarNodo.setEnabled(false);
			
			anNodo = new JTextField();
			anNodo.setEditable(false);
			anNodo.setEnabled(false);
			anNodo.setColumns(10);
			
			anPadre = new JTextField();
			anPadre.setEditable(false);
			anPadre.setEnabled(false);
			anPadre.setColumns(10);
			
			eliminarNodo = new JButton("Eliminar nodo:");
			eliminarNodo.setEnabled(false);
			
			enNodo = new JTextField();
			enNodo.setEnabled(false);
			enNodo.setEditable(false);
			enNodo.setColumns(10);
			
			obtenerGrados = new JButton("Obtener grados");
			obtenerGrados.setEnabled(false);
			
			gradosDelArbol = new JButton("Grado del \u00E1rbol");
			gradosDelArbol.setEnabled(false);
			
			obtenerCamino = new JButton("Obtener camino");
			obtenerCamino.setEnabled(false);
			
			
			ocNodo = new JTextField();
			ocNodo.setEnabled(false);
			ocNodo.setEditable(false);
			ocNodo.setColumns(10);
			
			recorridoPreOrden = new JButton("Recorrido pre-orden");
			recorridoPreOrden.setEnabled(false);
			
			recorridoPorNiveles = new JButton("Recorrido por niveles");
			recorridoPorNiveles.setEnabled(false);
			
			recorridoPostOrden = new JButton("Recorrido post-orden");
			recorridoPostOrden.setEnabled(false);
			recorridoPostOrden.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
				}
			});
			
			eliminarNodosDeGrado = new JButton("Eliminar nodos de grado:");
			eliminarNodosDeGrado.setEnabled(false);
			
			endgGrado = new JTextField();
			endgGrado.setEnabled(false);
			endgGrado.setEditable(false);
			endgGrado.setColumns(10);
			
			
			
			
			
			
			GroupLayout groupLayout = new GroupLayout(frmProyecto.getContentPane());
			groupLayout.setHorizontalGroup(
				groupLayout.createParallelGroup(Alignment.LEADING)
					.addGroup(groupLayout.createSequentialGroup()
						.addGap(30)
						.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
							.addComponent(datos)
							.addGroup(groupLayout.createSequentialGroup()
								.addGroup(groupLayout.createParallelGroup(Alignment.LEADING, false)
									.addComponent(obtenerGrados, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(ingreso, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(agregarNodo, GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
									.addComponent(obtenerCamino, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(eliminarNodo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(recorridoPreOrden, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
									.addComponent(eliminarNodosDeGrado, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGap(18)
								.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
									.addGroup(groupLayout.createSequentialGroup()
										.addGap(33)
										.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING)
											.addComponent(gradosDelArbol, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
											.addComponent(recorridoPorNiveles, GroupLayout.PREFERRED_SIZE, 156, GroupLayout.PREFERRED_SIZE)))
									.addGroup(groupLayout.createSequentialGroup()
										.addPreferredGap(ComponentPlacement.RELATED)
										.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
											.addComponent(endgGrado, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
											.addGroup(groupLayout.createSequentialGroup()
												.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING, false)
													.addComponent(enNodo, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
													.addComponent(anNodo, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
													.addComponent(ingresarCaracter, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
												.addGap(18)
												.addComponent(lblNewLabel)
												.addGap(18)
												.addComponent(anPadre, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
												.addGap(18)
												.addComponent(lblNewLabel_1))
											.addComponent(ocNodo, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))))
								.addGap(15)
								.addComponent(recorridoPostOrden, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)))
						.addGap(78))
			);
			groupLayout.setVerticalGroup(
				groupLayout.createParallelGroup(Alignment.LEADING)
					.addGroup(groupLayout.createSequentialGroup()
						.addGap(32)
						.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
							.addComponent(ingreso)
							.addComponent(ingresarCaracter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGap(18)
						.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
							.addGroup(groupLayout.createSequentialGroup()
								.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
									.addComponent(agregarNodo)
									.addComponent(anNodo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
								.addGap(18)
								.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
									.addComponent(eliminarNodo)
									.addComponent(enNodo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
							.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
								.addComponent(lblNewLabel)
								.addComponent(anPadre, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblNewLabel_1)))
						.addGap(18)
						.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
							.addComponent(obtenerGrados)
							.addComponent(gradosDelArbol))
						.addGap(18)
						.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
							.addComponent(obtenerCamino)
							.addComponent(ocNodo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGap(18)
						.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
							.addComponent(recorridoPreOrden)
							.addComponent(recorridoPorNiveles)
							.addComponent(recorridoPostOrden))
						.addGap(18)
						.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
							.addComponent(eliminarNodosDeGrado)
							.addComponent(endgGrado, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGap(18)
						.addComponent(datos)
						.addContainerGap(57, Short.MAX_VALUE))
			);
			frmProyecto.getContentPane().setLayout(groupLayout);
			
			//-------------------------------------------------
			
		}
